<template>
    <!-- <div class="product-list">
        <h2>产品列表</h2>
        <div class="operations">
            <el-button type="primary" @click="gotoCreate" v-if="isAdmin">发布产品</el-button>
        </div>

        <el-form :inline="true" :model="listQuery" class="demo-form-inline">
            <el-form-item label="关键词">
                <el-input v-model="listQuery.keyword" placeholder="搜索产品" clearable></el-input>
            </el-form-item>
            <el-form-item label="类型">
                <el-select v-model="listQuery.type" placeholder="选择类型" clearable>
                    <el-option label="交通票据" value="flight"></el-option>
                    <el-option label="住宿酒店" value="hotel"></el-option>
                    <el-option label="景点门票" value="ticket"></el-option>
                    <el-option label="美食套餐" value="package"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item label="排序">
                <el-select v-model="listQuery.sortBy" placeholder="排序方式" clearable @change="handleSortChange">
                    <el-option label="创建时间" value="createTime"></el-option>
                    <el-option label="价格" value="price"></el-option>
                    <el-option label="库存" value="stock"></el-option>
                </el-select>
                <el-select v-model="listQuery.sortOrder" placeholder="排序" clearable v-if="listQuery.sortBy"
                    @change="handleSortChange">
                    <el-option label="升序" value="asc"></el-option>
                    <el-option label="降序" value="desc"></el-option>
                </el-select>
            </el-form-item>
            <el-form-item>
                <el-button type="primary" @click="fetchProducts">搜索</el-button>
            </el-form-item>
        </el-form>

        <el-table :data="products" style="width: 100%" v-loading="loading">
            <el-table-column prop="name" label="产品名称" width="180"></el-table-column>
            <el-table-column prop="type" label="类型" width="100"></el-table-column>
            <el-table-column prop="price" label="价格" width="100"></el-table-column>
            <el-table-column prop="stock" label="库存" width="100"></el-table-column>
            <el-table-column prop="status" label="状态" width="100">
                <template #default="scope">
                    {{ scope.row.status == 1 ? "上架中" : "已下架" }}
                </template>
            </el-table-column>
            <el-table-column prop="createTime" label="创建时间" width="180">
                <template #default="scope">
                    {{ formatDate(scope.row.createTime) }}
                </template>
            </el-table-column>
            <el-table-column label="操作">
                <template #default="scope">
                    <router-link :to="{ name: 'ProductDetail', params: { id: scope.row.id } }">
                        <el-button size="small" type="primary" text>查看</el-button>
                    </router-link>
                    <ProductItem :product="scope.row" :isProductAuthor="isProductAuthor" @edit="handleEdit"
                        @updateStatus="handleUpdateStatus" @delete="handleDelete" />
                </template>
            </el-table-column>
        </el-table>

        <el-pagination v-model:current-page="listQuery.page" v-model:page-size="listQuery.pageSize"
            :page-sizes="[10, 20, 50, 100]" layout="total, sizes, prev, pager, next, jumper" :total="total"
            @size-change="handleSizeChange" @current-change="handleCurrentChange">
        </el-pagination>
    </div> -->
</template>

<script setup>
import { ref, onMounted, reactive, computed, watch } from 'vue';
import { getProductList, deleteProduct, updateProductStatus } from '@/api/product';
import { ElMessage } from 'element-plus';
import { useRouter } from 'vue-router';
import { useUserStore } from '@/stores/user';
import { formatDate } from '@/utils/date'
import ProductItem from './ProductItem.vue';

const router = useRouter();
const products = ref([]);
const loading = ref(false);
const total = ref(0);
const userStore = useUserStore()

const isAdmin = computed(() => {
    return userStore.isLoggedIn && userStore.currentUser && userStore.currentUser.role === 'admin';
});

const isProductAuthor = computed(() => {
    return (product) => {
        return userStore.isLoggedIn && userStore.currentUser && userStore.currentUser.id === product.userId;
    };
});

const isUserLoaded = computed(() => userStore.currentUser !== null);

watch(isUserLoaded, (newValue) => {
    if (newValue) {
        fetchProducts();
    }
});

onMounted(async () => {
    if (userStore.isLoggedIn) {
        try {
            await userStore.fetchUserInfo();
        } catch (error) {
            console.error('Error fetching user info:', error);
            ElMessage.error('加载用户信息失败');
        }
    }
});

onMounted(() => {
    fetchProducts();
});

const listQuery = reactive({
    page: 1,
    pageSize: 10,
    keyword: null,
    type: null,
    sortBy: 'createTime',
    sortOrder: 'desc'
});



const fetchProducts = () => {
    loading.value = true;
    getProductList(listQuery)
        .then(response => {
            products.value = response.data.data.records;
            total.value = response.data.data.total;
        })
        .catch(error => {
            console.error("Error fetching products:", error);
            ElMessage.error("获取产品列表失败")
        })
        .finally(() => {
            loading.value = false;
        });
};

const handleEdit = (product) => {
    router.push({ name: 'ProductUpdate', params: { id: product.id } });
};

const handleUpdateStatus = (product) => {
    let newStatus = product.status === 1 ? 0 : 1
    updateProductStatus(product.id, newStatus).then(res => {
        ElMessage.success(newStatus === 1 ? "上架成功" : "下架成功")
        fetchProducts()
    }).catch(err => {
        console.log(err);
        ElMessage.error(newStatus === 1 ? "上架失败" : "下架失败")
    })
};

const handleDelete = (id) => {
    deleteProduct(id)
        .then(() => {
            ElMessage.success('产品删除成功');
            fetchProducts();
        })
        .catch(error => {
            console.error("Error deleting product:", error);
            ElMessage.error("删除失败");
        });
};

const gotoCreate = () => {
    router.push({ name: 'ProductCreate' });
}

const handleSortChange = () => {
    fetchProducts()
}

const handleSizeChange = (val) => {
    listQuery.pageSize = val;
    fetchProducts();
};

const handleCurrentChange = (val) => {
    listQuery.page = val;
    fetchProducts();
};
</script>

<style scoped>
.product-list {
    padding: 20px;
}

.operations {
    margin-bottom: 20px;
}
</style>